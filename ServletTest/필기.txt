ServletTest > 필기.txt

1. D:\class\server 폴더 생성
2. 이클립스 실행 > 1번 폴더 워크스페이스 지정
3. 클라이언트 : VS
    서버 : Eclipse
4. 이클립스 설정
   4.1 인코딩
      a. Workspace
      b. CSS Files
      c. HTML Files
      d. JSP Files
   4.2 서버(아파치 톰캣)
      a. server
          - http://tomcat.apache.org > 64-bit Windows.zip
      b. port number 변경
5. 새프로젝트 생성
      a. Servlet
           - File > New > Dynamic Web Project > "ServletTest" 




Dynamic Web Project 디렉터리 구조

1. Java Resources
	a. src
		- 패키지
		- 자바 소스 파일(*.java)
	b. Libraries
		- JRE System Library(jre 1.8.0_211)
			: 자바 실행에 필요한 여러 라이브러리(클래스)
		- Apache Tomcat v8.5
			: 자바 웹 서버를 구현하는데 필요한 여러 라이브러리(클래스)
			: 자바 웹 서버 컨테이너(전체 실행 환경)
				- 아파치 톰캣 : Servlet Container
				- 아파치 톰캣 : JSP Container
			: 또 다른 종류 컨테이너(Jeus, WebLogics, WebShpere, GoldFish 등) 
			
	
2. WebContent
	a. 자신 + 자식 영역
		- 브라우저에게 전달될 컨텐츠 담는 영역
		- 이 폴더를 벗어나면 브라우저가 접근 불가능
		- 포맷(웹문서, 이미지, 동영상, 라이브러리(css, js 등..))
	b. META-INF
		- 시스템 폴더(톰캣)
	c. WEB-INF(******************************)
		- 웹 사이트의 모든 설정
		1. lib
			- 외부 라이브러리를 참조하는 폴더
			- ojdbc6.jar
		2. web.xml(******************************)
			- 웹 사이트의 기본 설정
			- 추후에 다른 설정을 하기 위한 파일들을 생성
			a. 직접 생성(=c. 추후 생성)
			b. 프로젝트 생성 시 같이 생성
			
			

Servlet, 서블릿
- 기술
- 자바를 사용해서 동적으로 웹페이지를 만드는 기술
- 자바 진영에서 처음으로 시도한 웹 서버 기술
- Sever + Applet


Servlet 개선(보안) > JSP > Servlet + JSP or Spring


1. Java + Oracle + JDBC + Servlet -> 페이지를(*.htm, *.css, *.js) 만드는 프로그램을 만든다.
2. 브라우저(고객)가 페이지 요청
3. HTML + CSS + JavaScript -> 브라우저가 볼 수 있는 페이지를 위의 프로그램을 통해서 만든다.


Servlet Class, 서블릿 클래스
- 자바 클래스
- 웹 어플리케이션을 자바 클래스 형태로 제작
- 알바생


Servlet Class 작성 규칙

1. 서블릿 클래스 선언
	a. javax.servlet.Servlet 인터페이스를 구현한다.(복잡함)
	a. javax.servlet.http.HttpServlet 클래스를 상속한다.(간편함) ***

2. doGet / doPost 메서드 선언
	- 둘 중 하나 선언 or 둘 다 선언
	- 클라이언트(브라우저)의 요청이 들어오면 자동으로 실행되는 메소드(일종의 콜백함수 or 이벤트)
	- 동적으로 HTML 페이지를 생성하는 역할
	- 메서드 작성 규칙
		a. 매개 변수 작성(2개)
			1. javax.servlet.http.HttpServletRequest
			2. javax.servlet.http.HttpServletResponse
		b. 예외 미루기
			1. java.io.IOException
			2. javax.servlet.ServletException


3. 동적 HTML 문서 작성 구현
	- HttpServletResponse 객체의 getWriter() 메소드 호출 > PrintWriter 객체 반환
	- PrintWrite 객체의 printXXX("<html>")를 사용해서 HTML 페이지를 만든다.
	- BufferedWriter로 문서 만들기와 유사
	- 브라우저가 돌려받을 문서가 완성(동적으로 페이지를 작성한다.)

4. 브라우저가 자바 파일(서블릿 클래스)을 호출할 수 있도록 설정
	- 브라우저가 인식 가능한 가상 주소 생성 + 서블릿 객체 매핑
	- web.xml에서 작성



서블릿, Servlet
- 웹 애플리케이션(웹 응용 프로그램 == 사이트)을 만드는 기술
- CGI, PHP, ASP, JSP 등..

CGI, Common Gateway Interface
	- 브라우저와 웹서버간의 정보를 주고 받는 규약
	- 이걸 기반으로 여러 프로그래밍 언어를 가지고 웹서버 기술을 만들어 냄.
	- C 언어 구현 -> 웹에 좀 더 맞는 언어 찾기

ASP, Active Server Pages
	- MS
	- VBScript 사용(Basic)

ASP.NET 
	- MS
	- C# 사용(C++, VB.NET)

PHP, Personal HyperText Preprocessor
	- C 기반 스크립트 언어
	- 개인 사이트용 > 기업용 많이 사용
	- 100% 무료

JSP, Java Server Pages
	- MS의 ASP의 자바 버전
	- 자바 사용


서블릿, Servlet
	- 웹 서버측에서 실행되는 자바 클래스(객체)이다.
	- Servlet 인터페이스를 구현해서 입력/출력을 HTTP 프로토콜의 요청/응답의 형태로 처리

HTTP 프로토콜
	- 인터넷 프로토콜 : TPC/IP, FTP, SMTP, HTTP, HTTPS 등..
	- 웹서버(아파치톰캣)와 브라우저(크롬)간의 데이터를 주고 받는 규칙(프로토콜)
	- 요청(Request)과 응답(Response)의 형태로 구성되어 있다.

HTTP 요청 메시지
	- 시작라인 + 헤더 + 본문
	- 요청할 때 사용한 HTTP 메서드 종류(GET, POST) + 주소 정보(URL) + 데이터(폼 파라미터)
	- 데이터 : 서버에게 보내는 데이터(사용자 입력)
	- GET : 전송할 파라미터를 URL에 붙여서 전송. 길이 256바이트. 본문이 없어서 속도가 빠르다. 파라미터가 URL에 노출
	- POST : 파라미터를 본문에 넣어서 발송, 길이 제약X, 노출X 

HTTP 응답 메시지
	- 시작 라인 + 헤더 + 본문
	- 요청에 대한 서버 처리 상태코드(403, 500, 501, 502, 503, 220 등..)
		+ 응답하는 컨텐츠 타입 정보(MIME 타입 정보 -> "text/html", "images/gif" 등..)
		+ 컨텐츠 내용(html문서, css, js, 이미지 등..)



이클립스로 서블릿 실행하는 방법
1. 자바 편집 > 저장 > 아파치 톰캣 직접 실행 > 브라우저에 직접 URL 입력 > 페이지 보기
2. 자바 편집 > 저장 > Ctrl + F11





서블릿 동작 순서
- 서블릿은 서블릿 컨테이너(톰캣)가 생성부터 소멸까지 관리/운영한다.



*** 2~3주에 각 단계별로 설명할 수 있을 정도로 외워야 함!!

1. 사용자 URL 요청 > HTTP Request(요청)
	- 브라우저 요청이 발생한다.

2. 아파치에게 전달 + 추가 처리 판단
	- 추가 처리 판단 테이블 참조

3. 톰캣에게 전달
	- 사전에 웹 서버측(톰캣)에 [URL + 서블릿 클래스]로 미리 매핑되어 있는 배포 서술자(Deployment Descriptor)가 있어야 한다. > 브라우저는 자바 파일에 직접 접근이 불가능하기 때문에 가상 주소를 사용해야 한다.

4. request, response 객체 생성
	- 톰캣이 요청에 따른 처리를 하기 위해서 미리
		HttpServletRequest 객체와 HttpServletResponse 객체를 생성(세팅)해둔다.

5. 서블릿 객체 생성
	- *.java -> (compile) -> *.class -> (new) + instance(서블릿!!!)
	- 인스턴스 생성 직 후 init() 메서드를 호출 > service() 메소드 호출

6. service() 메서드 호출
	- service() 메소드안에서 HTTP 요청 방식이 GET 혹은 POST 방식인지를 판단 후
		GET -> doGet() 메소드 호출
		POST -> doPost() 메소드 호출
	- doGet()/doPost() 메소드 호출 시 4번 단계에서 미리 만든 request, response 객체를 매개 변수로 전달한다.

7. doGet() / doPost() 메서드 호출
	- HTML 페이지를 동적으로 생성한다. <- PrintWriter 객체를 사용해서
	- 개발자가 작성하는 대부분의 코드는 이곳에서 작성한다.

8. HTTP Response(응답)
	- 7번에서 만든 임시 HTML 페이지 > response 객체에 담는다. > 서블릿 컨테이너(톰캣)가 HTTP 응답 메시지로 바꿔서 웹서버(아파치)에게 전달한다. > 웹서버(아파치)는 브라우저에게 전달한다.
	- 응답 메시지를 작성하는데 사용했던 모든 자원이 소멸
	- request, response 객체 소멸
	- 단, 서블릿만 살아남는다.

9. 재요청 발생
	- 동일한 서블릿에게 또 다시 요청하면 > 일부 단계 생략
	- 첫요청 : request/response 객체 생성 -> 서블릿 객체 생성 -> init() -> service() -> doGet()/doPost() -> 응답 -> request/response 객체 소멸 + 자원 소멸
	- 재요청 : request/response 객체 생성 -> service() -> doGet()/doPost() -> 응답 -> request/response 객체 소멸 + 자원 소멸



클라이언트가 서버에게 자원 요청하는 방식
1. GET
	a. <form method="GET">
	b. 브라우저 주소창에 직접 URL 입력하는 경우
	c. <a href="URL">
	d. location.href = "URL"
	e. F5(새로고침)
	
2. POST
	a. <form method="POST"> : 유일



클라이언트 -> (데이터 전송) -> 서버
- 데이터 입력 페이지(ex05.do) > Ex05.java
- 데이터 수신 페이지(ex05ok.do) > Ex05Ok.java //파스칼로 작성
1. GET
2. POST



클라이언트 -> (데이터 전송) -> 서버
- 데이터 입력 페이지 > ex07.htm
- 데이터 입력 페이지(ex07.do) > Ex07.java
- 데이터 수신 페이지(ex07ok.do) > Ex07Ok.java


클라이언트 -> (데이터 전송) -> 서버
- 데이터를 수신하는 쪽은 반드시 서버 기술로 만들어야 한다.(자바)
*.html -> (데이터 전송) -> *.do //O
*.do -> (데이터 전송) -> *.do //O
*.do -> (데이터 전송) -> *.html //X
*.html -> (데이터 전송) -> *.html //X
