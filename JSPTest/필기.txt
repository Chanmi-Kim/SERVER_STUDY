1. 새프로젝트 > Dynamic Web Project > "JSPTest"
2. 새패키지 > "com.test.jsp"

JSP, Java Server Pages
- 서블릿의 다음 버전

- 서블릿의 단점
	1. HTML, CSS, JavaScript 작성이 힘듬 > 문자열 취급
		: 자바 베이스 + a(HTML)
- 서블릿의 장점
	1. 자바를 사용할 수 있다. > 자바 클래스 기반
		
- JSP의 장점
	1. HTML, CSS, JavaScript 작성이 쉬움 > HTML 문서 기반
		: HTML 베이스 + a(Java)
	2. 웹 문서 기반
	3. 가상 주소 불필요 > *.jsp 직접 요청
 - JSP의 단점
 	1. 자바 작업에 열약한 환경 > 특히 개발 툴


WebContent > ex01.jsp


JSP 기본 요소
1. JSP 지시자, 지시어, JSP Directive
2. 스크립트 요소, Scripting Elements
3. 액션 태그, Action Tags


1. JSP 지시자, 지시어, JSP Directive
- <%@ XXX %>
- JSP 페이지를 실행하기 위해 JSP 컨테이너(실행기, 톰캣)에게 해당 JSP를 처리하기 위한 여러가지 환경 설정을 한다.
- page 지시자
- include 지시자
- taglib 지시자


2. 스크립트 요소, Scripting Elements
- <% %>
- 자바구문을 쓸 수 있게 해준다.(=서블릿과 유사한 작업 환경을 만들어 준다.)
- 스크립틀릿, Scriptlet(=Script + Applet)
- 익스프레션, Expression
- 선언부, Declaration


3. 액션 태그, Action Tags
- <jsp:XXX>, <c:XXX>, <c:if>, <c:for>
- 프로그래밍 기능이 내재된 태그
- JSP 기본 액션 태그
- JSTL 확장 액션 태그
- 사용자 커스텀 액션 태그




page 지시자
- <%@ page 속성="값" 속성="값" 속성="값" .. %>
- 속성은 1개 이상 작성 가능
- <%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
    a. language
    	- JSP 페이지에서 사용할 프로그래밍 언어 지정
    
    b. contentType
    	- 현재 페이지의 컨텐츠에 대한 기술
    	- contentType="text/html; charset=ISO-8859-1" //기본값
    	- contentType="text/html; charset=UTF-8" //대다수의 환경
    	- text/html : 톰캣이 크롬에게 네가 전달받는 페이지는 이런 형식이야.. 라고 알려주는 역할
    	- charset : 톰캣이 현재 JSP를 해석할 때 사용할 인코딩
    
    c. pageEncoding
		- 브라우저에게 돌려줄 웹 페이지의 인코딩 방식
		- resp.setCharaterEncoding("UTF-8"):
	
	d. import
		- 패키지 or 클래스 참조
		- 자바의 import와 동일한 역할
	
	e. session
		- true/false
		- 기본값 true
		- 세션 사용 유무 설정
	
	f. buffer
		- JSP 페이지의 출력 버퍼 크기 지정
		- 기본값 8kb
		- buffer = "none"
	
	g. autoFlush
		- flush : 버퍼의 내용을 일단 처리하고 깨끗하게 비운뒤 다시 업무를 시작해라.
		- 출력 버퍼가 꽉차면 발송하고 다시 비워라.
		- 기본값 true
	
	h. info
		- 페이지 설명
		- 설명 주석 역할
		- 개발자용
	
	i. errorPage
		- 에러 페이지로 사용할 페이지의 URL 지정
		- 500 번대 에러


include 지시자
- <%@ include file="URL" %>
- 특정 JSP/HTML 페이지를 해당 JSP 페이지의 일부 영역 삽입하는 기능
- 조각 페이지
- <ifraem> 태그와 유사한 역할
- 한 페이지 이상에서 반복되는 내용을 조각 페이지로 만들어서 재사용(유지 보수성)


taglib 지시자
- 액션 태그와 관계



JSP 스크립트 요소
- JSP 페이지(HTML) 내에서 자바 구문을 쓸 수 있도록 도와주는 역할
- 동적으로 페이지를 만드는데 필요한 자바 비즈니스 코드 작성 + 자바 자원을 웹페이지 출력
a. 선언문, Declaration
b. 스크립틀릿, Scriptlet
c. 표현식, Expression





스크립틀릿, Scriptlet
- Script + Applet
- <% %>
- 이 영역은 자바 영역이다.(*.java 파일이라고 생각하고 코딩하면 된다.)
- 비즈니즈 코드 작성
	a. 데이터 처리(Oracle)
	b. 동적 HTML(CSS,JavaScript)
- 사용 빈도가 가장 높음
- ex04.jsp


표현식, Expression
- <%= 값 %>
- 값 : 상수, 변수, 메소드호출 등등.. syso
- 출력의 목적 : HTML에 소스의 일부로 남기기 위해서..(*****)
- 출력의 목적 : 눈에 보이는 데이터를 출력한다.(X)
- ex06_expression.jsp


선언문, Declaration
- <%! %>
- 현재 JSP 페이지에서 사용할 멤버 변수와 메소드를 선언하는 영역
- 잘 사용 안함
- ex07_declaration.jsp
- com.test.jsp > Ex07.java


JSP 내장 객체, JSP Implicit Object
- 개발자가 직접 생성하는 객체가 아니라, JSP가 미리 만들어서 제공하는 객체(톰캣이 생성)
- 예약어 제공
- JSP 내장 객체는 서블릿에도 동일하게 존재한다. 단, 자바에서는 직접 만들어야 한다.
- request, response, session, pageContext, out, application, config, page, exception
- request, response, session, pageContext > out, application > config, page, exception

- request, session, pageContext, application
	: 내부에 사용자 데이터를 저장할 수 있는 Map을 가지고 있다.(*************************)
	: setAttribute(key, value), getAttribute(key)
	

a. request
	a.1 전송된 데이터 가져오기(*****)
	a.2 전송된 데이터 인코딩
	a.3 전송과 관련된 정보 가져오기
	- javax.servlet.ServletRequest > javax.servlet.http.HttpServletRequest
	- 클라이언트 -> (행동) -> 서버
	- HTTP 요청에 관련된 정보를 제어하는 객체
	- 전송되는 데이터 관리, 요청 정보를 제공
	
	- ex08_form.jsp //글쓰기 페이지
	- ex08_process.jsp //데이터 수신 + 처리 페이지
	
	- ex09_form.jsp
	- ex09_process.jsp
	
	- ex10_request_header.jsp
	

b. response
	- javax.servlet.ServletResponse > javax.servlet.http.HttpServletResponse
	- HTTP 요청에 대한 응답 정보를 제어하는 객체
	- 서버 -> (행동) -> 클라이언트
	b.1 돌려줄 페이지 제작 > response.getWriter() > PrintWriter
	b.2 돌려줄 인코딩 > response.setCharaterEncoding("UTF-8")
	b.3 돌려줄 내용의 MIME 지정(text/html)
	b.4 페이지 이동하기
	
	- ex11_response_one.jsp
	- ex11_response_two.jsp


c. pageContext
	- javax.servlet.jsp.PageContext
	- 페이지 실행에 필요한 컨텍스트 정보를 저장한 객체
	
	- ex12_pageContext_one.jsp
	- ex12_pageContext_two.jsp


d. session
	- javax.servlet.http.HttpSession
	- 클라이언트 세션 정보를 저장한 객체

e. out
	- javax.servlet.jsp.JspWriter
	- 응답 페이지 전송을 위한 출력 스트림 객체
	- 서블릿의 PrintWriter와 유사(쌍둥이)
	- ex13_out.jsp

f. application
	- javax.servlet.ServletContext
	- 애플리케이션 컨텍스트 정보를 저장한 객체
	- 몇몇 서버 정보를 반환
	- ex14_application.jsp
	
g. config
	- javax.servlet.ServletConfig
	- 해당 페이지의 서블릿 설정 정보를 저장한 객체
	
h. page
	- javax.servlet.jsp.HttpJspPage
	- 서블릿 객체 자신을 참조하는 객체

i. exception
	- java.lang.Throwable
	- 예외 처리 객체


내장 객체의 데이터 입/출력
- pageContext, request, session, application 객체만
- setAttribute(key, value), getAttribute(key)
- 위의 4가지 내장 객체는 생명 주기가 서로 다르다.(*******************************)
- 내장 객체의 생명 주기에 따른 유효범위를 영역(Scope)라고 부른다.
- 유효 범위 영역
	- pageContext < request < session < application

- ex15_one.jsp
- ex15_two.jsp
- ex15_three.jsp


session & application

- ex16_count.jsp
- ex16_count_1.jsp

- ex17_scope.jsp
- inc > ex17_sub.jsp //조각페이지


1. JSP 기술 == Servlet 기술
2. JSP 페이지는 클래스이다.




액션 태그, Action Tag
- 프로그래밍 기능이 있는 태그
- JSP 페이지에서 자바 코드 사용 > 스크립틀릿 사용 > 스파게티 코드 생성 > 가독성 저하 > 자바의 기능을 태그 형태 제공 > 가독성 향상
- XML 기반(문법이 엄격함. 대소문자 구분)
	a. JSP 액션 태그
	b. JSTL 액션 태그(*****)
	c. 사용자 정의 태그(커스텀 태그)



JSP 액션 태그
- 표준 방식

a. 페이지 흐름 제어 액션
	- forward
		- ex19_one.jsp
		- ex19_two.jsp
		
	- include
		- ex20_include.jsp
		- inc > ex20_sub.jsp
	
b. 자바빈 액션
	- useBean
	- ex21_bean.jsp
	- ex22_bean.jsp
	

<jsp:useBean> 액션 태그
- 자바 빈을 취급하는 태그

자바 빈, Java Bean
- 자바 객체(인스턴스)

자바빈 설계 규약
1. 멤버 변수는 반드시 private 선언한다.
2. 반드시 getter와 setter를 구현한다.
3. set멤버명(), get멤버명()
4. getter는 매개변수를 가질 수 없다.
5. setter는 매개변수를 반드시 가져야 한다.(1개 이상)
6. 읽기 전용 멤버는 구현 가능하다.(getter만 구현 가능)
7. 쓰기 전용 멤버는 구현할 수 없다.(setter만 구현)
8. 생성자 매개변수가 구현할 수 없다.(기본 생성자만 구현 가능)

<jsp:useBean id="자바빈 객체명" class="자바빈 클래스명" scope="사용 영역"></jsp:useBean>
- scope: page(기본), request, session, application 중 하나

<jsp:setProperty name="자바빈 객체명" property="속성명" value="값" />
- 쓰기

<jsp:getProperty name="자바빈 객체명" property="속성명" />
- 읽기


- ex23_bean_form.jsp //데이터 입력 + 전송
- ex23_bean_ok.jsp //데이터 수신 + 처리

- ex24_scope_one.jsp
- ex24_scope_two.jsp
- ex24_scope_three.jsp
	
c. 애플릿 액션(X)




쿠키, Cookie
- 사용자 정보 객체
- JavaScript 조작
- Java 조작


- ex25_cookie.jsp
- ex25_cookie_1.jsp

- ex26_cookie_one.jsp
- ex26_cookie_two.jsp
- ex26_cookie_three.jsp

- ex27_cookie_form.jsp
- ex27_cookie_ok.jsp

- ex28_cookie_one.jsp
- ex28_cookie_two.jsp






세션, Session
- 사용자 접속 객체
- 접속한 사용자의 개인 정보를 관리하는 객체
- 만료 시간

- ex29_session.jsp
- ex29_set.jsp
- ex29_del.jsp
- ex29_reset.jsp
- ex29_interval.jsp



- ex30_error.jsp
- ex30_error_null.jsp
- ex30_error_index.jsp



파일 업로드
- 클라이언트 측 자원 -> 서버 측 전송 : 파일 복사

파일 다운로드
- 서버 측 자원 -> 클라이트 측 전송 : 파일 복사

JDK & JRE
- 파일 업로드 기능 구현 안됨

파일 업로드 라이브러리
1. COS > cos.jar
	- http://www.servlets.com > com.oreilly.servlet > cos-20.08.zip


//단일 파일 업로드
- ex31_file_form.jsp
- ex31_file_ok.jsp
- WebContent > files 폴더 생성

//다중 파일 업로드
- ex32_file_form.jsp
- ex32_file_ok.jsp


이미지 썸네일
- JAI, Java Advanced Imaging, 이미지 편집 라이브러리
- jai_core.jar + jai_codec.jar


- ex33_thumbnail_form.jsp
- ex33_thumbnail_ok.jsp



EL, Expression Language
- <%= %> : Expression
- HTML 문서에 원하는 내용을 출력하는 역할
- 전용 언어
- ${속성명}
- 일반 자바 데이터를 출력하지 못하고, pageContext, request, session, application 객체내의
  저장소의 데이터만 출력이 가능하다.
- ex34_el.jsp
- ex35_el.jsp



EL
- 자바의 출력 기능 대신하는 역할

JSP 액션 태그
- <jsp:XXX>

JSTL 액션 태그
- 기존의 JSP 액션 태그의 역할
- 자바의 제어 기능 대신하는 역할
	- 변수 생성
	- 조건문
	- 반복문
- EL을 지원(******************)

- ex36_jstl.jsp


주소록
- CRUD 구현
- JSP Model 1 + JDBC + Oracle
1. 주소록 쓰기
2. 주소록 읽기
3. 주소록 수정하기
4. 주소록 삭제하기

데이터
- 번호(PK), 이름, 주소, 나이, 성별, 연락처

페이지 구성
- WebContent > address 폴더 생성
1. list.jsp : 주소록 읽기(시작 페이지)
2. add.jsp / addok.jsp : 주소록 쓰기
3. edit.jsp / editok.jsp : 주소록 수정하기
4. delok.jsp : 주소록 삭제하기
5. template.jsp : 레이아웃 작업

- WebContent > address > css 폴더 생성
1. main.css : 공통 CSS 구현



웹 보안(SW > 프로세스 제어)
1. 인증, Authentication
- 로그인, 로그아웃
- 현재 접속자가 해당 사이트의 구성원인지를 확인하는 작업
- 인증 과정을 거친 사용자는 사이트 방문 시에 인증 과정을 거치지 않은 사용자와 구분이 되어야 한다.(****)
- 인증 정보(?) + 남의 정보 관찰 불가능 + 모든 페이지 열람 가능
	 -> 쿠키 or 세션 -> 인증 티켓 발급

2. 허가, Authorization
- 어떤 업무에 대해서 현재 접속자가 권한이 있는지 확인하는 작업
- 회원 전용 게시판 등..


WebContent > auth 폴더 생성

1. index.jsp : 초기 화면

2. login.jsp : 로그인 폼 페이지
3. login_ok.jsp : 로그인 처리 페이지(인증 작업)
4. logout.jsp : 로그아웃 페이지

5. member.jsp : 회원 전용 페이지(허가 작업)
6. admin.jsp : 관리자 전용 페이지(허가 작업)





JSP 웹 서버 구현
1. JSP Model 1
	- 지금까지 수업한 JSP
	- HTML + CSS + JavaScript + Java + JSP = *.jsp + *.java
	
2. JSP Model 2
	- MVC Model
	- Servlet + JSP -> MVC


JSP MVC

1. Servlet
	- 자바 기반 + 웹 추가
	- 웹 코드 작성 힘들다;;

2. JSP
	- 웹 기반 + 자바 추가
	- 자바 코드 작성 힘들다;;

3. Servlet + JSP
	- 자바 코드 : 서블릿 작성
	- 웹 코드 : JSP 작성
	


WebContent > mvc 폴더
com.test.mvc 패키지 생성

Hello 만들기

1. Servlet 
	com.test.mvc > Hello.java

2. JSP
	WebContent > mvc > hello.jsp




JSP Model 2
- JSP MVC
- CRUD
- 코드 관리 프로그램(게시판)
- 코드 + 설명 + 관리 + 싱글 유저


- JSPTest > code.sql

- com.test.code 패키지 생성
- WebContent > WEB-INF > views 폴더 생성
- WebContent > WEB-INF > views > code 폴더 생성

- 게시물 쓰기
	- com.test.code > Add.java
	- com.test.code > AddOk.java
	- views > code > add.jsp
	- views > code > addok.jsp
- 게시물 목록
	- com.test.code > List.java
	- views > code > list.jsp
- 게시물 상세보기
	- com.test.code > View.java
	- views > code > view.jsp
- 게시물 수정
	- com.test.code > Edit.java
	- com.test.code > EditOk.java
	- views > code > edit.jsp
	- views > code > editok.jsp
- 게시물 삭제
	- com.test.code > DelOk.java
	- views > code > delok.jsp
- 데이터 모델
	- com.test.code > DBUtil.java //복사
	- com.test.code > CodeDAO.java
	- com.test.code > CodeDTO.java
	- com.test.code > CategoryDTO.java
- 클라이언트 자원
	- WebContent > css, js //jQuery, Bootstrap 그대로 사용
	- WebContent > css > code.css //공통 CSS 파일
- 조각 페이지
	- WebContent > inc > codeheader.jsp //상단부 공통 JSP
	- WebContent > inc > codefooter.jsp //하단부 공통 JSP
	- WebContent > inc > codeasset.jsp //리소스 JSP

- 템플릿
	- com.test.code > Template.java
	- views > code > template.jsp

JSP MVC(Model 2)
- 브라우저 요청 > 서블릿(Template.java) 응답 > 서블릿 업무 > JSP 호출 > JSP 업무 > 반환 HTML 완성 > 브라우저 응답


