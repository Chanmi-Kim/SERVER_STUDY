하는 행동 순서 적어놓기(History)

1. 위치(패키지, 폴더)
2. 파일명
3. 업무 내용




---------------------------------------




1. 게시판
2. 회원
3. 부가 기능

새 프로젝트 만들기
- Dynamic Web Project > "MyHome" > web.xml 체크

데이터베이스
- MyHome > script.sql 만들기

컨텍스트 루트 경로 변경하기
- "MyHome" > "myhome"

라이브러리 가져오기
- WebContent > WEB-INF > lib
	- jstl-1.2.jar //JSTL
	- cos.jar //파일업로드
	- ojdbc6.jar or ojdbc14.jar //오라클

클라이언트 라이브러리 가져오기
- jQuery + Bootstrap
- WebContent > asset > css
- WebContent > asset > js
- WebContent > asset > fonts	
- WebContent > asset > images	
	
업무 폴더 만들기
- com.test.home //루트 패키지
- com.test.home.member //회원 관련
- com.test.home.board //게시판 관련
- com.test.home.etc //기타 기능 관련

- WebContent > inc //공통 페이지(조각 페이지)
- WebContent > WEB-INF > views //뷰 루트
- WebContent > WEB-INF > views > member //회원
- WebContent > WEB-INF > views > board //게시판
- WebContent > WEB-INF > views > etc //기타

	
기본 템플릿(레이아웃)
- com.test.home > Template.java
- views > template.jsp

추가 파일 만들기
- inc > asset.jsp
- asset > css > main.css
- asset > js > main.js

- inc > header.jsp



시작 페이지
- com.test.home > Index.java
- views > index.jsp

회원 페이지 > 시작 페이지
- com.test.home.member > Index.java
- views > member > index.jsp

회원 페이지 > 가입
- com.test.home.member > Add.java
- com.test.home.member > AddOk.java
- views > member > add.jsp
- views > member > addok.jsp

- com.test.home > DBUtil.java //복사
- com.test.home.member > MemberDAO.java
- com.test.home.member > MemberDTO.java

- WebContent > pic 폴더 만들기(프로필 사진 폴더)


로그인
- com.test.home.member > LoginOk.java
- views > member > loginok.jsp

로그 아웃
- com.test.home.member > LogOut.java
- views > member > logout.jsp

회원 탈퇴하기
- com.test.home.member > Del.java
- views > member > del.jsp
- com.test.home.member > DelOk.java
- views > member > delok.jsp



게시판
- 비회원
	- 글쓰기X
	- 글수정X
	- 글삭제X
	- 글목록O
	- 글보기O
- 회원
	- 모든 기능 사용 가능

- 기능
	a. 목록 보기
	b. 상세 보기
	c. 쓰기
	d. 수정하기
	e. 삭제하기
	f. 검색하기
	
- 목록 보기
- com.test.home.board > List.java
- views > board > list.jsp

- 글쓰기
- com.test.home.board > Add.java
- views > board > add.jsp
- com.test.home.board > AddOk.java
- views > board > addok.jsp

- 상세보기
- com.test.home.board > View.java
- views > board > view.jsp

- 수정하기
- com.test.home.board > Edit.java
- views > board > edit.jsp
- com.test.home.board > EditOk.java
- views > board > editok.jsp


- 삭제하기
- com.test.home.board > Del.java
- views > board > del.jsp
- com.test.home.board > DelOk.java
- views > board > delok.jsp


검색하기
- List.java
- list.jsp
- com.test.home.board > SearchDTO.java


댓글쓰기
- com.test.home.board > AddComment.java
- views > board > addcomment.jsp

댓글수정
- com.test.home.board > EditComment.java
- views > board > editcomment.jsp

댓글삭제
- com.test.home.board > DelComment.java
- views > board > delcomment.jsp




페이징, Paging
- 데이터베이스의 종류에 따라 구현 기법이 달라짐
	1. 오라클 : rownum 사용
	2. MS-SQL : top 5 키워드 사용
	3. MySQL(MariaDB, PostgreSQL) : limit 0, 5


게시물 + 첨부 파일
- WebContent > lib > cos.jar
- CRUD
- com.test.home.board > Add.java + AddOk.java
- views > board > add.jsp + addok.jsp
- view.do

- com.test.home.board > Download.java


답변형 게시판 규칙
- thread(number), depth(number) 컬럼 추가
1. 새글 쓰기
	- /board/add.do
	a. 현존 모든 게시물 중에 가장 큰 thread값을 찾는다. > 그 값에 + 1000을 한 값을 자신의 thread값으로 사용한다.(nvl(max(thread), 0) + 1000)
	b. depth는 무조건 0을 넣는다. 
	
2. 답변글 쓰기
	- /board/add.do?reply=1
	a. 현존 모든 게시물의 thread값을 대상으로 현재 작성 중인 답변글의 부모글의 thread값보다 작고, 이전 새글의 thread값보다 큰 thread을 찾아서 모두 -1한다.
	b. 현재 작성 중인 답변글의 thread값은 부모글의 thread - 1을 넣는다.
	c. 현재 작성 중인 답변글의 depth값은 부모글의 depth + 1을 넣는다.



해시 태그
- tblHash(=tblComment)
- 선택 입력
- 다중 입력
- 공백 사용 불가
- 영대소문자 입력 가능, 검색 무시





차트 페이지
- com.test.home.etc > Chart.java
- views > etc > chart.jsp

- com.test.home.etc > EtcDAO.java
- com.test.home.etc > ChartDTO.java



- com.test.home.etc > Data.java
- views > etc > data.jsp

- com.test.home.etc > DataOk.java //Ajax 응답 페이지




Open API

- com.test.home.etc > Book.java
- views > etc > book.jsp

- com.test.home.etc > APIExamSearchBook.java
- com.test.home.etc > BookData.java


지도
- com.test.home.etc > Map.java
- views > etc > map01.jsp
- views > etc > map02.jsp
- views > etc > map03.jsp
- views > etc > map04.jsp
- views > etc > map05.jsp
- views > etc > map06.jsp


지도 + 데이터베이스 + Ajax(선택)
- 사용자 지정 좌표 점 > 데이터베이스 저장 > 마커 사용
- 테이블 생성
- com.test.home.etc > MyPlace.java
- views > etc > myplace.jsp
- com.test.home.etc > MyPlaceData.java
- com.test.home.etc > MyPlaceDTO.java


주변 커피숍 지도
- com.test.home.etc > MyCoffee.java
- views > etc > mycoffee.jsp
- com.test.home.etc > MyCoffeeData.java
- com.test.home.etc > MyCoffeeDTO.java



jQuery Mobile Framework
- http://jquerymobile.com
- 프로젝트 : 고객 or 관리자 > 모바일 페이지

모바일 기기(폰, 태블릿)
1. Native Application
	- 전용 언어 + 전용 개발 툴 사용
	- Android : 이클립스 + 자바 > 안드로이드 스튜디오 + 자바 > 안드로이드 스튜디오 + Kotlin(코틀린)
	- iOS : XCode + Object C > Swift
	- 윈도우폰 : Visual Studio + C#
	- 표준 개발 방식 : 습득 난이도 상, 유지 보수 난이도 상 + 기능 풍부, 속도 빠름 

2. Mobile Web
	- 브라우저 동작
	- 그냥 웹사이트
	- 개발 비용 저렴, 개발 속도 빠름, 동작 느림, 기능 적음
	- 서비스 업무용
	- 모바일 UI > 각종 라이브러리 + 프레임워크 > jQuery Mobile

3. Hybrid Application
	- 개발(Mobile Web) > 여러가지 과정 > 앱(Native)
	- PhoneGap, Cordova, Ionic 등..



모바일 페이지
- 모바일 브라우저는 해상도에 대한 특정 표현이 없으면 모든 기기의 너비가 960px이라고 가정한다.

- com.test.myhome.mobile > Ex.java
- views > mobile > template.jsp
- views > mobile > ex01.jsp
- views > mobile > ex02.jsp

- views > mobile > ex03a.jsp
- views > mobile > ex03b.jsp

- views > mobile > ex04.jsp












